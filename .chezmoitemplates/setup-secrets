#!/bin/bash
set -e

# This script manages secrets using Bitwarden CLI (bw)

# Check if Bitwarden CLI is installed
if ! command -v bw >/dev/null 2>&1; then
  echo "Bitwarden CLI not found. Installing..."
  
  # OS-specific installation
  if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS - use Homebrew
    brew install bitwarden-cli
  elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # Linux - use npm
    if command -v npm >/dev/null 2>&1; then
      npm install -g @bitwarden/cli
    else
      # Try to install npm first
      if command -v apt >/dev/null 2>&1; then
        sudo apt update && sudo apt install -y npm
        npm install -g @bitwarden/cli
      elif command -v dnf >/dev/null 2>&1; then
        sudo dnf install -y npm
        npm install -g @bitwarden/cli
      elif command -v pacman >/dev/null 2>&1; then
        sudo pacman -Sy npm
        npm install -g @bitwarden/cli
      else
        echo "Unsupported Linux distribution. Please install npm and Bitwarden CLI manually."
        exit 1
      fi
    fi
  else
    echo "Unsupported operating system: $OSTYPE"
    exit 1
  fi
fi

# Check if logged in to Bitwarden
BW_STATUS=$(bw status | jq -r '.status')

if [[ "$BW_STATUS" != "unlocked" ]]; then
  echo "Logging in to Bitwarden..."
  
  if [[ "$BW_STATUS" == "unauthenticated" ]]; then
    # Need to log in
    bw login
  elif [[ "$BW_STATUS" == "locked" ]]; then
    # Just need to unlock
    bw unlock
  fi
  
  # Store session key for this script execution
  export BW_SESSION=$(bw unlock --raw)
fi

# Define secrets folder name in Bitwarden
BW_FOLDER_NAME="Chezmoi Dotfiles"

# Get or create the folder for dotfiles secrets
BW_FOLDER_ID=$(bw list folders | jq -r ".[] | select(.name==\"$BW_FOLDER_NAME\") | .id")
if [[ -z "$BW_FOLDER_ID" || "$BW_FOLDER_ID" == "null" ]]; then
  echo "Creating Bitwarden folder for dotfiles secrets..."
  BW_FOLDER_ID=$(bw create folder "$BW_FOLDER_NAME" | jq -r '.id')
fi

# Define secrets to manage
declare -A SECRETS=(
  ["github_token"]="GitHub Personal Access Token"
  ["openai_api_key"]="OpenAI API Key (if used)"
)

# Setup function to create or update a secret in Bitwarden
setup_secret() {
  local key=$1
  local description=$2
  
  echo "Setting up: $description"
  
  # Check if item already exists
  ITEM_ID=$(bw list items --folderid "$BW_FOLDER_ID" | jq -r ".[] | select(.name==\"$key\") | .id")
  
  if [[ -z "$ITEM_ID" || "$ITEM_ID" == "null" ]]; then
    # Create new item
    read -sp "Enter $description: " value
    echo
    
    # Template for secure note item
    TEMPLATE="{
      \"folderid\": \"$BW_FOLDER_ID\",
      \"type\": 2,
      \"name\": \"$key\",
      \"notes\": \"$description\",
      \"secureNote\": {
        \"type\": 0
      },
      \"fields\": [
        {
          \"name\": \"token\",
          \"value\": \"$value\",
          \"type\": 1
        }
      ]
    }"
    
    bw create item "$TEMPLATE" > /dev/null
    echo "Added $key to Bitwarden"
  else
    echo "$key already exists in Bitwarden"
    
    # Optionally update the existing item
    read -p "Do you want to update this secret? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      read -sp "Enter new value for $description: " value
      echo
      
      # Get the item first
      ITEM_JSON=$(bw get item "$ITEM_ID")
      
      # Find the field index or add a new field
      FIELD_INDEX=$(echo "$ITEM_JSON" | jq '.fields | map(.name == "token") | index(true)')
      
      if [[ "$FIELD_INDEX" == "null" ]]; then
        # Add a new field
        UPDATED_ITEM=$(echo "$ITEM_JSON" | jq ".fields += [{\"name\":\"token\",\"value\":\"$value\",\"type\":1}]")
      else
        # Update existing field
        UPDATED_ITEM=$(echo "$ITEM_JSON" | jq ".fields[$FIELD_INDEX].value = \"$value\"")
      fi
      
      bw edit item "$ITEM_ID" "$UPDATED_ITEM" > /dev/null
      echo "Updated $key in Bitwarden"
    fi
  fi
}

# Setup all secrets
for key in "${!SECRETS[@]}"; do
  setup_secret "$key" "${SECRETS[$key]}"
done

echo "All secrets configured successfully in Bitwarden"

# Helper function to retrieve secrets from Bitwarden
cat << 'EOF' > "$HOME/.local/bin/get-secret"
#!/bin/bash
# Helper script to retrieve secrets from Bitwarden for use in scripts
# Usage: get-secret KEY

if [ -z "$1" ]; then
  echo "Usage: get-secret KEY"
  exit 1
fi

# Unlock if locked and get session key
BW_STATUS=$(bw status | jq -r '.status')
if [[ "$BW_STATUS" != "unlocked" ]]; then
  export BW_SESSION=$(bw unlock --raw)
fi

# Get the folder ID for Chezmoi Dotfiles
BW_FOLDER_ID=$(bw list folders | jq -r '.[] | select(.name=="Chezmoi Dotfiles") | .id')
if [[ -z "$BW_FOLDER_ID" || "$BW_FOLDER_ID" == "null" ]]; then
  echo "Error: Chezmoi Dotfiles folder not found in Bitwarden" >&2
  exit 1
fi

# Find the item and extract value
ITEM_ID=$(bw list items --folderid "$BW_FOLDER_ID" | jq -r ".[] | select(.name==\"$1\") | .id")
if [[ -z "$ITEM_ID" || "$ITEM_ID" == "null" ]]; then
  echo "Error: Secret '$1' not found in Bitwarden" >&2
  exit 1
fi

# Get the field value
VALUE=$(bw get item "$ITEM_ID" | jq -r '.fields[] | select(.name=="token") | .value')
if [[ -z "$VALUE" || "$VALUE" == "null" ]]; then
  echo "Error: Token field not found for secret '$1'" >&2
  exit 1
fi

echo "$VALUE"
EOF

# Make the helper script executable
chmod +x "$HOME/.local/bin/get-secret"
echo "Created get-secret helper script at $HOME/.local/bin/get-secret" 