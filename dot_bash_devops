# DevOps utility aliases and functions

# Kubernetes
alias k="kubectl"
alias kgp="kubectl get pods"
alias kgs="kubectl get svc"
alias kgn="kubectl get nodes"
alias kgd="kubectl get deployments"
alias ktop="kubectl top pods"
alias kwatch="watch kubectl get pods"

# Docker
alias d="docker"
alias dc="docker-compose"
alias dcup="docker-compose up -d"
alias dcdown="docker-compose down"
alias dcl="docker-compose logs -f"

# Terraform
alias tfi="terraform init -upgrade"
alias tfp="terraform plan -out=tfplan.out"
alias tfa="terraform apply"
alias tfd="terraform destroy"
alias tfv="terraform validate"
alias tfo="terraform output"

# AWS
alias awsls="aws s3 ls"
alias awscp="aws s3 cp"
alias awswho="aws sts get-caller-identity"
alias awsec2="aws ec2 describe-instances --query 'Reservations[].Instances[].[InstanceId,State.Name,InstanceType,PrivateIpAddress,PublicIpAddress,Tags[?Key==\`Name\`].Value]' --output table"

# Git DevOps
alias gpr="git pull --rebase"
alias gwip="git add -A && git commit -m 'WIP: Work in progress [skip ci]'"
alias gcln="git clean -fd"

# SSH
alias sshl="cat ~/.ssh/config | grep '^Host ' | cut -d ' ' -f 2"

# Ansible
alias ap="ansible-playbook"
alias agi="ansible-galaxy install"

# Monitoring
alias htopp="htop --sort-key=PERCENT_CPU"
alias dfs="df -h | sort -k 5 -r"
alias nsl="netstat -tulanp"

# Kubernetes functions

# Switch Kubernetes context
kubectx() {
    if command -v kubectl &> /dev/null; then
        if [ $# -gt 0 ]; then
            kubectl config use-context "$1"
        else
            local contexts=$(kubectl config get-contexts -o name)
            local selected_ctx=$(echo "$contexts" | fzf --height 30% --border --prompt="Switch Kubernetes context: ")
            if [ -n "$selected_ctx" ]; then
                kubectl config use-context "$selected_ctx"
            fi
        fi
    else
        echo "kubectl is not installed"
    fi
}

# Switch Kubernetes namespace
kubens() {
    if command -v kubectl &> /dev/null; then
        if [ $# -gt 0 ]; then
            kubectl config set-context --current --namespace="$1"
        else
            local namespaces=$(kubectl get namespaces -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')
            local selected_ns=$(echo "$namespaces" | fzf --height 30% --border --prompt="Switch namespace: ")
            if [ -n "$selected_ns" ]; then
                kubectl config set-context --current --namespace="$selected_ns"
            fi
        fi
    else
        echo "kubectl is not installed"
    fi
}

# Get logs for a pod
klogs() {
    if [ $# -eq 0 ]; then
        echo "Usage: klogs <pod-name-pattern> [namespace]"
        return 1
    fi
    
    local namespace="default"
    if [ $# -gt 1 ]; then
        namespace="$2"
    fi
    
    local pods=$(kubectl get pods -n "$namespace" | grep "$1" | awk '{print $1}')
    local pod_count=$(echo "$pods" | wc -l)
    
    if [ -z "$pods" ]; then
        echo "No pods matching '$1' found in namespace '$namespace'"
        return 1
    elif [ "$pod_count" -eq 1 ]; then
        kubectl logs -f "$(echo $pods | tr -d '\n')" -n "$namespace"
    else
        local selected_pod=$(echo "$pods" | fzf --height 30% --border --prompt="Select pod: ")
        if [ -n "$selected_pod" ]; then
            kubectl logs -f "$selected_pod" -n "$namespace"
        fi
    fi
}

# Execute command in pod shell
kexec() {
    if [ $# -eq 0 ]; then
        echo "Usage: kexec <pod-name-pattern> [namespace] [command]"
        return 1
    fi
    
    local namespace="default"
    if [ $# -gt 1 ]; then
        namespace="$2"
    fi
    
    local command="sh"
    if [ $# -gt 2 ]; then
        command="${@:3}"
    fi
    
    local pods=$(kubectl get pods -n "$namespace" | grep "$1" | awk '{print $1}')
    local pod_count=$(echo "$pods" | wc -l)
    
    if [ -z "$pods" ]; then
        echo "No pods matching '$1' found in namespace '$namespace'"
        return 1
    elif [ "$pod_count" -eq 1 ]; then
        kubectl exec -it "$(echo $pods | tr -d '\n')" -n "$namespace" -- $command
    else
        local selected_pod=$(echo "$pods" | fzf --height 30% --border --prompt="Select pod: ")
        if [ -n "$selected_pod" ]; then
            kubectl exec -it "$selected_pod" -n "$namespace" -- $command
        fi
    fi
}

# AWS profile switcher
awsp() {
    if [ -f ~/.aws/config ]; then
        local profiles=$(grep -E '^\[profile' ~/.aws/config | sed -E 's/\[profile (.*)\]/\1/')
        local selected_profile=$(echo "$profiles" | fzf --height 30% --border --prompt="Switch AWS profile: ")
        if [ -n "$selected_profile" ]; then
            export AWS_PROFILE="$selected_profile"
            echo "Switched to AWS profile: $selected_profile"
        fi
    else
        echo "AWS config not found at ~/.aws/config"
    fi
}

# Docker container shell
dsh() {
    if [ $# -eq 0 ]; then
        local containers=$(docker ps --format "{{.Names}}")
        local selected_container=$(echo "$containers" | fzf --height 30% --border --prompt="Select container: ")
        if [ -n "$selected_container" ]; then
            docker exec -it "$selected_container" sh
        fi
    else
        docker exec -it "$1" sh
    fi
}

# Docker container logs
dlogs() {
    if [ $# -eq 0 ]; then
        local containers=$(docker ps --format "{{.Names}}")
        local selected_container=$(echo "$containers" | fzf --height 30% --border --prompt="Select container: ")
        if [ -n "$selected_container" ]; then
            docker logs -f "$selected_container"
        fi
    else
        docker logs -f "$1"
    fi
}

# Clean up Docker resources
dclean() {
    echo "Cleaning Docker resources..."
    
    echo "Removing stopped containers..."
    docker container prune -f
    
    echo "Removing dangling images..."
    docker image prune -f
    
    echo "Removing unused networks..."
    docker network prune -f
    
    echo "Removing unused volumes..."
    docker volume prune -f
    
    echo "Docker cleanup complete!"
}

# SSH helper with favorite hosts
sssh() {
    if [ $# -eq 0 ]; then
        if [ -f ~/.ssh/config ]; then
            local hosts=$(grep -E '^Host ' ~/.ssh/config | awk '{print $2}' | grep -v "*")
            local selected_host=$(echo "$hosts" | fzf --height 30% --border --prompt="SSH to host: ")
            if [ -n "$selected_host" ]; then
                ssh "$selected_host"
            fi
        else
            echo "SSH config not found at ~/.ssh/config"
        fi
    else
        ssh "$@"
    fi
}

# Load or create environment variables from a .env file
loadenv() {
    local env_file=".env"
    
    if [ $# -gt 0 ]; then
        env_file="$1"
    fi
    
    if [ -f "$env_file" ]; then
        echo "Loading environment variables from $env_file"
        while IFS= read -r line || [ -n "$line" ]; do
            # Skip comments and empty lines
            [[ $line =~ ^#.*$ ]] && continue
            [[ -z $line ]] && continue
            
            local var=$(echo "$line" | cut -d= -f1)
            local val=$(echo "$line" | cut -d= -f2-)
            export "$var"="$val"
            echo "Set $var"
        done < "$env_file"
    else
        echo "Environment file $env_file not found"
    fi
}

# SSL certificate checker
check-cert() {
    if [ $# -eq 0 ]; then
        echo "Usage: check-cert <domain:port>"
        return 1
    fi
    
    echo | openssl s_client -servername "$1" -connect "$1" 2>/dev/null | openssl x509 -noout -dates -subject -issuer
} 