# Bash prompt configuration

# Set colors
reset="\[\033[0m\]"
black="\[\033[0;30m\]"
red="\[\033[0;31m\]"
green="\[\033[0;32m\]"
yellow="\[\033[0;33m\]"
blue="\[\033[0;34m\]"
purple="\[\033[0;35m\]"
cyan="\[\033[0;36m\]"
white="\[\033[0;37m\]"
bold_black="\[\033[1;30m\]"
bold_red="\[\033[1;31m\]"
bold_green="\[\033[1;32m\]"
bold_yellow="\[\033[1;33m\]"
bold_blue="\[\033[1;34m\]"
bold_purple="\[\033[1;35m\]"
bold_cyan="\[\033[1;36m\]"
bold_white="\[\033[1;37m\]"

# Joker-inspired colors
joker_purple="\[\033[38;5;135m\]"  # Bright purple
joker_green="\[\033[38;5;78m\]"    # Emerald green

# Git prompt function
git_prompt() {
    local git_status="$(git status -b --porcelain 2>/dev/null)"
    if [[ -n "$git_status" ]]; then
        local branch=$(git symbolic-ref --short HEAD 2>/dev/null || git describe --tags --always 2>/dev/null)
        local git_status_indicators=""
        
        if [[ $(git status --porcelain 2>/dev/null) ]]; then
            git_status_indicators+="!"
        fi
        
        if [[ $(git log origin/$branch..HEAD 2>/dev/null) ]]; then
            git_status_indicators+="↑"
        fi
        
        if [[ $(git log HEAD..origin/$branch 2>/dev/null) ]]; then
            git_status_indicators+="↓"
        fi
        
        if [[ -n "$git_status_indicators" ]]; then
            echo " $joker_purple$branch $joker_green[$git_status_indicators]$reset"
        else
            echo " $joker_purple$branch$reset"
        fi
    fi
}

# Set the prompt with Joker colors
export PS1="\n$joker_green\w$reset\$(git_prompt)\n$joker_purple➜$reset " 