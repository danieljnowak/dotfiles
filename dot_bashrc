# ~/.bashrc: executed by bash for non-login shells

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# History control
HISTCONTROL=ignoreboth
HISTSIZE=10000
HISTFILESIZE=20000
shopt -s histappend

# Check window size after each command
shopt -s checkwinsize

# Make less more friendly for non-text input files
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Set prompt
if [ -f "$HOME/.bash_prompt" ]; then
    . "$HOME/.bash_prompt"
fi

# No greeting message
export BASH_SILENCE_DEPRECATION_WARNING=1

# Language settings
export LANG=en_US.UTF-8

# Path enhancements
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"

# Editor settings
export EDITOR=nvim

# Default pager
export PAGER=less

# Modern CLI replacements
if command -v eza &> /dev/null; then
    alias ls="eza --color=always --icons=always"
    alias ll="eza --color=always --icons=always --long"
    alias la="eza --color=always --icons=always --long --all"
    alias lt="eza --color=always --icons=always --tree"
fi

# Configure bat (no paging by default)
export BAT_STYLE="numbers,changes"
export BAT_THEME="TwoDark"
unset BAT_PAGER

# Override bat as 'cat' without paging
if command -v bat &> /dev/null; then
    alias cat="bat --paging=never"
    alias batp="bat --paging=always"
fi

# Other CLI replacements
if command -v fd &> /dev/null; then
    alias find="fd"
fi

if command -v rg &> /dev/null; then
    alias grep="rg"
fi

# Git abbreviations
alias g="git"
alias gs="git status"
alias ga="git add"
alias gc="git commit"
alias gp="git push"
alias gl="git pull"
alias gd="git diff"
alias gb="git branch"
alias gco="git checkout"
alias glog="git log --oneline --decorate --graph"

# New tool abbreviations
if command -v lazygit &> /dev/null; then
    alias lg="lazygit"
fi

if command -v zellij &> /dev/null; then
    alias zj="zellij"
    alias zja="zellij attach"
    alias zjl="zellij list-sessions"
fi

# Directory navigation
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."

# Dev environment shortcuts
alias v="nvim"
alias c="code"
alias cu="cursor"

# FZF configuration
if command -v fzf &> /dev/null; then
    export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border --preview 'bat --color=always --paging=never {}'"
    [ -f ~/.fzf.bash ] && source ~/.fzf.bash
fi

# Load integrations
if command -v zoxide &> /dev/null; then
    eval "$(zoxide init bash)"
fi

if command -v starship &> /dev/null; then
    eval "$(starship init bash)"
fi

if command -v atuin &> /dev/null; then
    eval "$(atuin init bash)"
fi

# Custom functions

# Make directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Create a backup of a file
backup() {
    cp -r "$1" "$1.bak"
}

# Cat with pager for longer files
catp() {
    if [ $# -eq 0 ]; then
        echo "Usage: catp <file>"
        return 1
    fi
    
    # Get the number of lines in the file
    local line_count=$(wc -l < "$1")
    local terminal_height=$(tput lines)
    
    # If the file is longer than the terminal height, use paging
    if [ "$line_count" -gt "$terminal_height" ]; then
        bat --paging=always "$@"
    else
        bat --paging=never "$@"
    fi
}

# Extract archives
extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"     ;;
            *.tar.gz)    tar xzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar x "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xf "$1"      ;;
            *.tbz2)      tar xjf "$1"     ;;
            *.tgz)       tar xzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *)           echo "'$1' cannot be extracted via extract function" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Clean up old repos
clean-repos() {
    local repos_dir="${1:-.}"
    
    for dir in "$repos_dir"/*/; do
        if [ -d "$dir/.git" ]; then
            echo "Cleaning $dir"
            (cd "$dir" && git clean -xdf)
        fi
    done
}

# DevOps aliases
if [ -f ~/.bash_devops ]; then
    source ~/.bash_devops
fi

# Start terminal multiplexer if not already in a session
if command -v zellij &> /dev/null; then
    if [ -z "$ZELLIJ" ] && [ -z "$TMUX" ] && [ -z "$VSCODE_INJECTION" ]; then
        zellij attach -c default
    fi
fi

# Source local customizations
if [ -f ~/.bashrc.local ]; then
    source ~/.bashrc.local
fi 